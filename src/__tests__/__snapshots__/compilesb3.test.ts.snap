// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sb3 -> scratch-js 1`] = `
Object {
  "Abby/Abby.mjs": "import {
  Sprite,
  Trigger,
  Costume,
  Color
} from \\"https://pulljosh.github.io/scratch-js/scratch-js/index.mjs\\";

export default class Abby extends Sprite {
  constructor(...args) {
    super(...args);

    this.costumes = [
      new Costume(\\"abbyA\\", \\"./Abby/costumes/abbyA.svg\\", { x: 31, y: 100 }),
      new Costume(\\"abbyB\\", \\"./Abby/costumes/abbyB.svg\\", { x: 31, y: 100 }),
      new Costume(\\"abbyC\\", \\"./Abby/costumes/abbyC.svg\\", { x: 32, y: 100 }),
      new Costume(\\"abbyD\\", \\"./Abby/costumes/abbyD.svg\\", { x: 32, y: 101 })
    ];

    this.triggers = [
      new Trigger(Trigger.CLONE_START, this.startAsClone),
      new Trigger(Trigger.KEY_PRESSED, { key: \\"any\\" }, this.whenKeyAnyPressed)
    ];
  }

  *startAsClone() {
    this.move(10);
  }

  *whenKeyAnyPressed() {
    this.direction += this.costumeNumber;
    this.direction -= 15;
    this.goto(this.random(-240, 240), this.random(-180, 180));
    this.goto(this.y, -23);
    yield* this.glide(1, this.mouse.x, this.mouse.y);
    yield* this.glide(1, -36, this.x);
    this.direction = 90;
    this.direction = this.radToScratch(
      Math.atan2(this.mouse.y - this.y, this.mouse.x - this.x)
    );
    this.x += this.direction;
    this.x = -36;
    this.y += 10;
    this.y = -23;
    /* TODO: Implement motion_ifonedgebounce */ null;
    this.rotationStyle = Sprite.RotationStyle.LEFT_RIGHT;
    this.createClone();
    this.deleteThisClone();
  }
}
",
  "Stage/Stage.mjs": "import {
  Stage as StageBase,
  Trigger,
  Costume,
  Color
} from \\"https://pulljosh.github.io/scratch-js/scratch-js/index.mjs\\";

export default class Stage extends StageBase {
  constructor(...args) {
    super(...args);

    this.costumes = [
      new Costume(\\"backdrop1\\", \\"./Stage/costumes/backdrop1.svg\\", {
        x: 240,
        y: 180
      })
    ];

    this.triggers = [
      new Trigger(Trigger.GREEN_FLAG, this.whenGreenFlagClicked),
      new Trigger(
        Trigger.KEY_PRESSED,
        { key: \\"space\\" },
        this.whenKeySpacePressed
      ),
      new Trigger(Trigger.CLICKED, this.whenstageclicked),
      new Trigger(
        Trigger.BROADCAST,
        { name: \\"message1\\" },
        this.whenIReceiveMessage1
      )
    ];

    this.vars.myVariable = 0;
    this.vars.CloudVar = 20.1;
    this.vars.testList = [5];
  }

  *whenGreenFlagClicked() {
    this.costume = \\"backdrop1\\";
    /* TODO: Implement looks_switchbackdroptoandwait */ null;
    this.costume += 1;
    this.effects.color += this.costumeNumber;
    this.effects.color = this.costume.name;
    this.effects.clear();
  }

  *whenKeySpacePressed() {
    yield* this.playSound(/* TODO: Get url for sound [object Object] */);
    this.playSound(/* TODO: Get url for sound [object Object] */);
    this.stopAllSounds();
    /* TODO: Implement sound_changeeffectby */ null;
    /* TODO: Implement sound_seteffectto */ null;
    /* TODO: Implement sound_cleareffects */ null;
    /* TODO: Implement sound_changevolumeby */ null;
    /* TODO: Implement sound_setvolumeto */ null;
  }

  *whenstageclicked() {
    yield* this.askAndWait(\\"What's your name?\\");
    yield* this.askAndWait(this.answer);
    yield* this.askAndWait(this.keyPressed(\\"space\\"));
    yield* this.askAndWait(this.mouse.down);
    yield* this.askAndWait(this.mouse.x);
    yield* this.askAndWait(this.mouse.y);
    yield* this.askAndWait(/* TODO: Implement sensing_loudness */ null);
    yield* this.askAndWait(this.timer);
    yield* this.askAndWait(this.stage.costumeNumber);
    yield* this.askAndWait(this.stage.vars[\\"CloudVar\\"]);
    yield* this.askAndWait(new Date().getDay() + 1);
    yield* this.askAndWait(
      ((new Date().getTime() - new Date(2000, 0, 1)) / 1000 / 60 +
        new Date().getTimezoneOffset()) /
        60 /
        24
    );
    yield* this.askAndWait(/* no username */ \\"\\");
    this.restartTimer();
  }

  *whenbackdropswitchesto() {
    yield* this.wait(1);
    while (!null) {
      yield;
    }
    this.sprites[undefined].createClone();
    for (let i = 0; i < 10; i++) {
      while (!this.keyPressed(\\"space\\")) {
        if (this.mouse.down) {
          if (null) {
            null;
          } else {
            null;
          }
        }
        yield;
      }
      /* TODO: Implement stop all */ null;
      yield;
    }
    while (true) {
      null;
      yield;
    }
  }

  *whengreaterthan() {
    this.vars.CloudVar = this.vars.myVariable;
    this.vars.CloudVar += 1;
    this.vars.myVariable = 0;
    this.vars.myVariable += this.vars.CloudVar;
    /* TODO: Implement data_showvariable */ null;
    /* TODO: Implement data_hidevariable */ null;
    this.vars.testList.push(this.vars.testList.includes(\\"thing\\"));
    this.vars.testList.splice(1 - 1, 1);
    this.vars.testList = [];
    this.vars.testList.splice(
      this.vars.testList.indexOf(\\"thing\\") + 1 - 1,
      0,
      \\"thing\\"
    );
    this.vars.testList.splice(
      this.vars.testList[1 - 1] - 1,
      1,
      this.vars.testList.length
    );
    /* TODO: Implement data_showlist */ null;
    /* TODO: Implement data_hidelist */ null;
  }

  *whenIReceiveMessage1() {
    this.broadcast(\\"message1\\");
    yield* this.broadcastAndWait(\\"message1\\");
    yield* this.askAndWait(5 + this.random(8 / 4, 10));
    yield* this.askAndWait(0 - 0);
    yield* this.askAndWait(0 * 0);
    yield* this.askAndWait(0 / 0);
    yield* this.askAndWait(0 < 50 && 0 > 50);
    yield* this.askAndWait(0 == 50 || 0);
    yield* this.askAndWait(!null);
    yield* this.askAndWait(\\"\\" + \\"apple \\" + \\"apple\\"[1 - 1]);
    yield* this.askAndWait(\\"apple\\".length);
    yield* this.askAndWait(\\"apple\\".includes(\\"a\\"));
    yield* this.askAndWait(12 % 7);
    yield* this.askAndWait(Math.round(0));
    yield* this.askAndWait(10 ** 15);
  }

  *blockNameLabelText(boolean, numberOrText) {
    yield* this.playSound(/* TODO: Get url for sound [object Object] */);
    if (boolean) {
      null;
    }
  }
}
",
  "index.html": "<!DOCTYPE html>
<html>
  <head>
    <link
      rel=\\"stylesheet\\"
      href=\\"https://pulljosh.github.io/scratch-js/scratch-js/index.css\\"
    />
  </head>
  <body>
    <button id=\\"greenFlag\\">Green Flag</button>
    <div id=\\"project\\"></div>

    <script type=\\"module\\">
      import project from \\"./index.mjs\\";

      project.attach(\\"#project\\");

      document.querySelector(\\"#greenFlag\\").addEventListener(\\"click\\", () => {
        project.greenFlag();
      });

      // Autoplay
      project.greenFlag();
    </script>
  </body>
</html>
",
  "index.mjs": "import { Project } from \\"https://pulljosh.github.io/scratch-js/scratch-js/index.mjs\\";

import Stage from \\"./Stage/Stage.mjs\\";
import Abby from \\"./Abby/Abby.mjs\\";

const stage = new Stage({ costumeNumber: 1 });

const sprites = {
  Abby: new Abby({
    x: -36,
    y: -23,
    direction: 90,
    costumeNumber: 1,
    size: 100,
    visible: true
  })
};

const project = new Project(stage, sprites);
export default project;
",
}
`;

exports[`sb3 -> scratchblocks 1`] = `
Object {
  "Abby": "<touching [#859dde] ?>

<color [#ee9128] is touching [#935b58] ?>

(distance to (mouse-pointer v))

set drag mode [not draggable v]

when I start as a clone
move (10) steps

when [any v] key pressed
turn cw (costume [number v]) degrees
turn ccw (15) degrees
go to (random position v)
go to x: (y position) y: (-23)
glide (1) secs to (mouse-pointer v)
glide (1) secs to x: (-36) y: (x position)
point in direction (90)
point towards (mouse-pointer v)
change x by (direction)
set x to (-36)
change y by (10)
set y to (-23)
if on edge, bounce
set rotation style [left-right v]
create clone of (myself v)
delete this clone",
  "Stage": "when green flag clicked
switch backdrop to (backdrop1 v)
switch backdrop to (next backdrop v) and wait
next backdrop
change [color v] effect by (backdrop [number v]) :: looks
set [color v] effect to (backdrop [name v]) :: looks
clear graphic effects

when [space v] key pressed
play sound (pop v) until done
start sound (pop v)
stop all sounds
change [pan left/right v] effect by (10) :: sound
set [pan left/right v] effect to (volume) :: sound
clear sound effects
change volume by (-10)
set volume to (100) %

when stage clicked :: control hat
ask [What's your name?] and wait
ask (answer) and wait
ask <key (space v) pressed?> and wait
ask <mouse down?> and wait
ask (mouse x) and wait
ask (mouse y) and wait
ask (loudness) and wait
ask (timer) and wait
ask ([backdrop # v] of (Stage v)) and wait
ask ([☁ cloud var v] of (Stage v)) and wait
ask (current [day of week v]) and wait
ask (days since 2000) and wait
ask (username) and wait
reset timer

when backdrop switches to [backdrop1 v]
wait (1) seconds
wait until <>
create clone of ( v)
repeat (10)
	repeat until <key (space v) pressed?>
		if <mouse down?> then
			if <> then
			else
			end
		end
	end
	stop [all v]
end
forever
end

when [loudness v] > (10)
set [☁ cloud var v] to (my variable :: variables)
change [☁ cloud var v] by (1)
set [my variable v] to [0]
change [my variable v] by (☁ cloud var :: variables)
show variable [☁ cloud var v]
hide variable [my variable v]
add <[test list v] contains [thing] ? :: list> to [test list v]
delete (1) of [test list v]
delete all of [test list v]
insert [thing] at (item # of [thing] in [test list v]) of [test list v]
replace item (item (1) of [test list v]) of [test list v] with (length of [test list v])
show list [test list v]
hide list [test list v]

when I receive [message1 v]
broadcast (message1 v)
broadcast (message1 v) and wait
ask ((5) + (pick random ((8) / (4)) to (10))) and wait
ask ([] - []) and wait
ask ([] * []) and wait
ask ([] / []) and wait
ask <<[] < [50]> and <[] > [50]>> and wait
ask <<[] = [50]> or []> and wait
ask <not <>> and wait
ask (join [apple ] (letter (1) of [apple])) and wait
ask (length of [apple]) and wait
ask <[apple] contains [a] ? :: operators> and wait
ask ((12) mod (7)) and wait
ask (round []) and wait
ask ([10 ^ v] of (15)) and wait

define block name <boolean> label text (number or text) // run without screen refresh
play sound (number or text :: custom-arg) until done
if <boolean :: custom-arg> then
end",
}
`;
